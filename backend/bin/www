#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
// var express = require('express');
// var app1 = express();
// var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var io = require('socket.io')(server, {
  cors: {
    origin: "http://localhost:4200",
    methods: ["GET", "POST"]
    }
});

io.on('connection', (socket)=> {
  console.log('new connection made');

  socket.on('join', function(data){
    //joining
    socket.join(data.room);

    console.log(data.user + 'joined the room : ' + data.room);

    socket.broadcast.to(data.room).emit('new user joined', {user : data.user, message: 'has joined this room'})
});

  // Leaving

  socket.on('leave', function(data){

    console.log(data.user + 'left the room : ' + data.room);

    socket.broadcast.to(data.room).emit('left room', {user : data.user, message: 'has left this room'});

    socket.leave(data.room);
  });

  // Message

  socket.on('message', function(data){
    io.in(data.room).emit('new message', {user:data.user, message:data.message});
  });
});

// Handle image
// socket.on('sendImage', function(data){
//   var guess = data.base64.match(/^data:image\/(png|jpeg);base64,/)[1];
//   var ext = "";
//   switch(guess) {
//   case 'png'  : ext = ".png"; break;
//   case 'jpeg' : ext = ".jpg"; break;
//   default     : ext = ".bin"; break;
//   }
//   var savedFilename = "/uploads/" + randomString(10)+ext;
//   fs.writeFile(__dirname + "/public" + savedFilename, getBase64Image(data.base64), 'base64', function(err) {
//     if (err !== null){
//       console.log(err);
//     }
//     else{
//       io.sockets.emit("receiveImage", {
//         path: savedFilename,
//     });
//     console.log("Send image success!");
//     }
//   });
// });

// function getBase64Image(imgData) {
//   return imgData.replace(/^data:image\/(png|jpeg|jpg);base64,/, "");
//   }

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
